const cron = require('node-cron');
const axios = require('axios');
const { enviarCorreo } = require('../utils/emailSender');
const Alerta = require('../models/alerta');
const User = require('../models/user');

// Programa cada 5 minutos para pruebas (cambiar a '0 8 * * *' en producci√≥n)
cron.schedule('*/5 * * * *', async () => {
  console.log('‚è∞ Ejecutando env√≠o de alertas para todos los usuarios...');

  try {
    const alertas = await Alerta.findAll();

    for (const alerta of alertas) {
      const usuario = await User.findByPk(alerta.usuario_id);

      if (!usuario || !usuario.email) {
        console.warn(`‚ö†Ô∏è No se encontr√≥ email para el usuario ID ${alerta.usuario_id}`);
        continue;
      }

      try {
        let asunto = '';
        let contenidoHTML = '';

        if (alerta.descripcion?.toLowerCase().includes('mar√≠timo')) {
          // üåä ALERTA DE COSTAS
          const respuestaCostas = await axios.get(`https://appweatheralert-production.up.railway.app/api/aemet/costas/${alerta.municipio_id}`);
          const zonas = respuestaCostas.data;

          const filas = zonas.map(z =>
            `<tr>
              <td style="padding: 8px; border: 1px solid #ddd;">${z.nombre}</td>
              <td style="padding: 8px; border: 1px solid #ddd;">${z.estado}</td>
            </tr>`
          ).join('');

          asunto = 'üåä Estado mar√≠timo y fen√≥menos costeros';
          contenidoHTML = `
            <p>¬°Hola ${usuario.name}!</p>
            <p>Esta es la situaci√≥n mar√≠tima para tu zona seleccionada: <b>${alerta.titulo}</b></p>

            <table style="border-collapse: collapse; width: 100%; max-width: 600px; margin-top: 10px;">
              <thead>
                <tr style="background-color: #F26E22; color: white;">
                  <th style="padding: 8px; border: 1px solid #ddd;">Subzona</th>
                  <th style="padding: 8px; border: 1px solid #ddd;">Estado</th>
                </tr>
              </thead>
              <tbody>
                ${filas}
              </tbody>
            </table>

            <p style="margin-top: 20px;">¬°Un saludo!<br>El Equipo de Weather Alert.<br><i>La informaci√≥n enviada en este correo se ha obtenido directamente desde los servicios ofrecidos por la Agencia Estatal de Meteorolog√≠a (AEMET).</i></p>
          `;
        } else {
          // üå°Ô∏è ALERTA DE TEMPERATURAS
          const respuesta = await axios.get(`https://appweatheralert-production.up.railway.app/api/aemet/prediccion/${alerta.municipio_id}`);
          console.log(`üì° Predicci√≥n recibida para ${alerta.titulo}:`);
          console.log(JSON.stringify(respuesta.data, null, 2));

          const prediccion = respuesta.data[0]?.prediccion?.dia?.[0];
          const tempMax = prediccion?.temperatura?.maxima || '-';
          const tempMin = prediccion?.temperatura?.minima || '-';

          asunto = 'üå§Ô∏è Temperaturas m√°ximas y m√≠nimas';
          contenidoHTML = `
            <p>¬°Hola ${usuario.name}!</p>
            <p>Esta es la predicci√≥n actual para <b>${alerta.titulo}</b>:</p>

            <table style="border-collapse: collapse; width: 100%; max-width: 400px; margin-top: 10px;">
              <thead>
                <tr style="background-color: #F26E22; color: white;">
                  <th style="padding: 8px; border: 1px solid #ddd;">Ciudad</th>
                  <th style="padding: 8px; border: 1px solid #ddd;">Temp. M√°xima</th>
                  <th style="padding: 8px; border: 1px solid #ddd;">Temp. M√≠nima</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td style="padding: 8px; border: 1px solid #ddd;">${alerta.titulo}</td>
                  <td style="padding: 8px; border: 1px solid #ddd;">${tempMax} ¬∫C</td>
                  <td style="padding: 8px; border: 1px solid #ddd;">${tempMin} ¬∫C</td>
                </tr>
              </tbody>
            </table>

            <p style="margin-top: 20px;">¬°Un saludo!<br>El Equipo de Weather Alert.<br><i>La informaci√≥n enviada en este correo se ha obtenido directamente desde los servicios ofrecidos por la Agencia Estatal de Meteorolog√≠a (AEMET).</i></p>
          `;
        }

        await enviarCorreo(usuario.email, asunto, contenidoHTML);
        console.log(`‚úÖ Correo enviado a ${usuario.email} para la alerta "${alerta.titulo}".`);

      } catch (errorInterno) {
        console.error(`‚ùå Error interno procesando alerta "${alerta.titulo}" (${alerta.municipio_id}):`, errorInterno.message);

        // üì® Enviar correo informando del fallo
        try {
          await enviarCorreo(
            usuario.email,
            `‚ö†Ô∏è No se pudo procesar tu alerta "${alerta.titulo}"`,
            `
            <p>Hola ${usuario.name},</p>
            <p>No hemos podido obtener la informaci√≥n meteorol√≥gica para tu alerta en <b>${alerta.titulo}</b> debido a un error de conexi√≥n con los datos oficiales de la AEMET.</p>
            <p>Este problema puede deberse a una sobrecarga o fallo temporal. Se volver√° a intentar en el siguiente env√≠o.</p>
            <p>Gracias por tu paciencia,<br>‚Äî El equipo de Weather Alert</p>
            `
          );
          console.log(`üì¨ Correo de error enviado a ${usuario.email} por la alerta "${alerta.titulo}".`);
        } catch (correoError) {
          console.error(`‚ùå Tambi√©n fall√≥ el env√≠o del correo de error:`, correoError.message);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Error general en job de env√≠o de alertas:', error.message);
  }
});
